@page "/availability/{ServiceId:guid}/{EmployeeId:guid}"
@using Bulldog.Core.Domain
@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services
@inject IServiceApiService ServiceApiService

<div class="rz-p-12 rz-text-align-center">
    <RadzenDatePicker @bind-Value=@selectedDate Inline="true" DateRender="OnDateRender" />
</div>

@if (selectedDate != null)
{
    <h3>Available Hours for @selectedDate.Value.Date.ToString("dd.MM.yyyy")</h3>
    <div>
        @if (selectedDateHour != null)
        {
            <span>Selected Hour: @selectedDateHour.Value.ToString("HH:mm")</span>
        }
    </div>

    @if (availableDates.Any(ad => ad.DayOfWeek == selectedDate.Value.DayOfWeek))
    {
        var selectedDateAvailableHours = availableDates
            .Where(ad => ad.DayOfWeek == selectedDate.Value.DayOfWeek)
            .Select(ad => new { StartTime = selectedDate.Value.Date + ad.WorkingHours.StartTime, EndTime = selectedDate.Value.Date + ad.WorkingHours.EndTime });

        foreach (var hourRange in selectedDateAvailableHours)
        {
            <button type="button" class="btn btn-outline-primary" @onclick="() => SelectHour(hourRange.StartTime)">
                @hourRange.StartTime.ToString("HH:mm")
            </button>
        }
    }

    else
    {
        <p>No available hours for @selectedDate</p>
    }
    <!-- TODO: Wysyłanie jako formularz i aktualizacja w scheduler dla pracownika (stworzyć scheduler) -->
}

@code {
    [Parameter]
    public Guid ServiceId { get; set; }
    [Parameter]
    public Guid EmployeeId { get; set; }

    DateTime? selectedDate = DateTime.Now.Date;
    IList<AvailableDateDto> availableDates = new List<AvailableDateDto>();
    DateTime? selectedDateHour;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableDates();
    }

    private void OnDateRender(Radzen.DateRenderEventArgs args)
    {
        args.Disabled = !availableDates.Any(ad => ad.DayOfWeek == args.Date.DayOfWeek);
    }

    private async Task LoadAvailableDates()
    {
        // Wywołaj API, aby pobrać dostępne daty
        availableDates = await ServiceApiService.GetAvailableDates(EmployeeId);
    }

    private void SelectHour(DateTime selectedHour)
    {
        selectedDateHour = selectedHour;
        // Obsługa wyboru godziny
        // Możesz tu dodać kod do zapisania wybranej godziny w odpowiedniej zmiennej lub przekazać ją dalej.
        // Na przykład: selectedDateHour = selectedHour;
    }
}
