@page "/availability/{ServiceId:guid}/{EmployeeId:guid}"
@using Bulldog.Core.Domain
@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services
@using System.Security.Claims
@inject IServiceApiService ServiceApiService
@inject AuthenticationStateProvider Auth
<div class="rz-p-12 rz-text-align-center">
    <RadzenDatePicker @bind-Value=@selectedDate Inline="true" DateRender="OnDateRender" Change="() => OnDateSelected(selectedDate.Value)" />
</div>

@if (selectedDate != null)
{
    <h3>Available Hours for @selectedDate.Value.Date.ToString("dd.MM.yyyy")</h3>
    <div>
        @if (selectedDateHour != null)
        {
            <span>Selected Hour: @selectedDateHour.Value.ToString("HH:mm")</span>
        }
    </div>
    @if (availableDates.Any(ad => ad.DayOfWeek == selectedDate.Value.DayOfWeek))
    {
        var availableDate = availableDates
            .Where(ad => ad.DayOfWeek == selectedDate.Value.DayOfWeek)
            .FirstOrDefault();

        if (availableDate != null)
        {

            <div style="display: flex; overflow: auto; white-space: nowrap;">
                @foreach (var availableHour in availableHoursForDay)
                {
                    if(availableHour.IsAvailable)
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick="() => SelectHour(availableHour.Hour)">
                            @availableHour.Hour.ToString("HH:mm")
                        </button>
                    }
                }
            </div>

            <button class="btn btn-primary" @onclick="PostReservation">Dalej</button>
        }
    }
    else
    {
        <p>No available hours for @selectedDate</p>
    }
    <!-- TODO: Sending as a form and updating the scheduler for the employee (create scheduler) -->
}

@code {
    [Parameter]
    public Guid ServiceId { get; set; }
    [Parameter]
    public Guid EmployeeId { get; set; }

    DateTime? selectedDate = DateTime.Now.Date;
    IList<AvailableDateDto> availableDates = new List<AvailableDateDto>();
    DateTime? selectedDateHour;
    IList<AvailableHour> availableHoursForDay = new List<AvailableHour>();
    IList<AvailableHour> allAvailableHours = new List<AvailableHour>();
    private int visibleHours = 5; // Initial number of visible hours

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableDates();
        await LoadAvailableHours();
        if (selectedDate.HasValue)
        {
            await LoadAvailableHoursForDay(selectedDate.Value);
        }
        var authenticationState = await Auth.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userEmail = user.FindFirstValue(ClaimTypes.Email);
        }

    }

    private void OnDateRender(Radzen.DateRenderEventArgs args)
    {
        args.Disabled = !availableDates.Any(ad =>
            ad.DayOfWeek == args.Date.DayOfWeek && ad.IsOpen && args.Date >= DateTime.Now.Date) || !allAvailableHours.Any(x => x.Hour.Date == args.Date);
    }

    private async Task LoadAvailableDates()
    {
        availableDates = await ServiceApiService.GetAvailableDates(EmployeeId);
    }

    private async Task LoadAvailableHoursForDay(DateTime date)
    {
        availableHoursForDay = await ServiceApiService.GetAvailableHoursForDay(EmployeeId, date);
    }

    private async Task LoadAvailableHours()
    {
        allAvailableHours = await ServiceApiService.GetAllAvailableHours(EmployeeId);
    }

    private void SelectHour(DateTime selectedHour)
    {
        selectedDateHour = selectedHour;
    }

    private void PostReservation()
    {

        var reservation = new Reservation();
    }

    private void ScrollHours()
    {
        // Increase the number of visible hours
        visibleHours += 5; // You can adjust this based on your preference
        StateHasChanged(); // Trigger a re-render to update the UI with the new set of visible hours
    }

    private async Task OnDateSelected(DateTime? newSelectedDate)
    {
        if (newSelectedDate.HasValue)
        {
            selectedDate = newSelectedDate.Value;
            await LoadAvailableHoursForDay(selectedDate.Value);
            StateHasChanged();
        }
    }
}

