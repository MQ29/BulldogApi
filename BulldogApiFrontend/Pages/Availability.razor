@page "/availability/{ServiceId:guid}/{EmployeeId:guid}"
@using Bulldog.Core.Domain
@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services
@inject IServiceApiService ServiceApiService

<div class="rz-p-12 rz-text-align-center">
    <RadzenDatePicker @bind-Value=@selectedDate Inline="true" DateRender="OnDateRender" />
</div>

@if (selectedDate != null)
{
    <h3>Available Hours for @selectedDate.Value.Date.ToString("dd.MM.yyyy")</h3>
    <div>
        @if (selectedDateHour != null)
        {
            <span>Selected Hour: @selectedDateHour.Value.ToString("HH:mm")</span>
        }
    </div>
    @if (availableDates.Any(ad => ad.DayOfWeek == selectedDate.Value.DayOfWeek))
    {
        var workingHours = availableDates
            .Where(ad => ad.DayOfWeek == selectedDate.Value.DayOfWeek)
            .Select(ad => ad.WorkingHours)
            .FirstOrDefault(); // Assuming there's only one set of working hours per day

        if (workingHours != null)
        {
            var startDateTime = selectedDate.Value.Date + workingHours.StartTime;
            var endDateTime = selectedDate.Value.Date + workingHours.EndTime;

            var timeIntervals = GenerateTimeIntervals(startDateTime, endDateTime);

            <div style="display: flex; overflow: auto; white-space: nowrap;">
                @foreach (var timeInterval in timeIntervals.Take(visibleHours))
                {
                    <button type="button" class="btn btn-outline-primary" @onclick="() => SelectHour(timeInterval)">
                        @timeInterval.ToString("HH:mm")
                    </button>
                }
            </div>

            if (timeIntervals.Count > visibleHours)
            {
                <button type="button" class="btn btn-link" @onclick="() => ScrollHours()">
                    Show more hours
                </button>
            }
        }
    }
    else
    {
        <p>No available hours for @selectedDate</p>
    }
    <!-- TODO: Sending as a form and updating the scheduler for the employee (create scheduler) -->
}

@code {
    [Parameter]
    public Guid ServiceId { get; set; }
    [Parameter]
    public Guid EmployeeId { get; set; }

    DateTime? selectedDate = DateTime.Now.Date;
    IList<AvailableDateDto> availableDates = new List<AvailableDateDto>();
    DateTime? selectedDateHour;
    private int visibleHours = 5; // Initial number of visible hours

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableDates();
    }

    private void OnDateRender(Radzen.DateRenderEventArgs args)
    {
        args.Disabled = !availableDates.Any(ad => ad.DayOfWeek == args.Date.DayOfWeek);
    }

    private async Task LoadAvailableDates()
    {
        availableDates = await ServiceApiService.GetAvailableDates(EmployeeId);
    }

    private void SelectHour(DateTime selectedHour)
    {
        selectedDateHour = selectedHour;
        // Handle the selected hour
        // For example: selectedDateHour = selectedHour;
    }

    private void ScrollHours()
    {
        // Increase the number of visible hours
        visibleHours += 5; // You can adjust this based on your preference
        StateHasChanged(); // Trigger a re-render to update the UI with the new set of visible hours
    }

    private List<DateTime> GenerateTimeIntervals(DateTime startTime, DateTime endTime)
    {
        var timeIntervals = new List<DateTime>();

        DateTime currentInterval = startTime;
        while (currentInterval <= endTime)
        {
            timeIntervals.Add(currentInterval);
            currentInterval = currentInterval.AddMinutes(15);
        }

        return timeIntervals;
    }
}
