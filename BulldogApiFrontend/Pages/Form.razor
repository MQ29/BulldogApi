<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-TM+HzgyFszvOX8XRvUZBteb4r4bJMyQ3wONtVaQ+tx3zxF2tfQpZUJSLS7etJl2g" crossorigin="anonymous">
@page "/form"
@page "/form/{Id:guid}"
@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services
@inject IServiceApiService ServiceApiService
@inject NavigationManager NavigationManager
@inject IModalService modal
@inject IDialogService DialogService


@foreach (var employee in employees)
{
    <div class="card mb-3" style="cursor: pointer;" @onclick="@(() => SelectEmployee(employee))">
        <div class="row no-gutters">
            <div class="col-md-4">
            </div>
            <div class="col-md-8">
                <div class="card-body text-right">
                    <h5 class="card-title">@employee.Name</h5>
                </div>
            </div>
        </div>
    </div>
}
<style>
    .card:hover {
        border-color: #007BFF; 
        transition: background-color 0.3s ease; 
    }
</style>
@code {
    [Parameter]
    public Guid Id { get; set; }
    protected ServiceDto service { get; set; } = new ServiceDto();
    private IList<EmployeeDto> employees { get; set; } = new List<EmployeeDto>();
    private DialogParameters mudparameters = new DialogParameters();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var apiService = await ServiceApiService.Get(Id);
        if (apiService != null)
            service = apiService;
        employees = await ServiceApiService.GetEmployyesForServiceId(Id);
    }

    // private void SubmitForm()
    // {
    //     var selectedEmployee = employees.FirstOrDefault(x => x.IsSelected == true);
    //     if (selectedEmployee != null)
    //         NavigationManager.NavigateTo($"/availability/{Id}/{selectedEmployee.Id}");
    //     else
    //     {
    //         Console.WriteLine("Please select an employee before submitting the form.");
    //     }
    //     // Navigate to the next view with the selected employee IDs
    // }

    private async void SelectEmployee(EmployeeDto employee)
    {
        await Close();
        foreach (var emp in employees)
        {
            emp.IsSelected = (emp == employee);
        }

        var selectedEmployee = employees.FirstOrDefault(x => x.IsSelected);


        if (selectedEmployee != null)
        {
            mudparameters.Add(nameof(Availability.ServiceId), Id);
            mudparameters.Add(nameof(Availability.EmployeeId), selectedEmployee.Id);
            
            var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
            DialogService.Show<Availability>("Wybierz termin", mudparameters, options);
            StateHasChanged();
        }
    }

    private async Task Close() => await ModalInstance.CloseAsync();
}
