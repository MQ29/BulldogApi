@page "/Schedule"
@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.Authorization
@inject IServiceApiService ServiceApiService
@inject IDialogService DialogService
@inject IAuthenticationService AuthenticationService
@attribute [Authorize]

<RadzenScheduler Data="@reservations" TItem="ReservationDto" StartProperty="StartDate" EndProperty="FinishDate" TextProperty="ServiceName"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect Style="height: 768px;">
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    private string UserId;
    private Guid EmployeeId;
    IList<ReservationDto> reservations = new List<ReservationDto>();
    RadzenScheduler<ReservationDto> scheduler;
    private DialogParameters mudparameters = new DialogParameters();
    protected override async Task OnInitializedAsync()
    {
        var jwtToken = await AuthenticationService.GetJwtAsync();
        if (!string.IsNullOrEmpty(jwtToken))
        {
            UserId = GetIdFromToken(jwtToken);
        }


        var employee = await ServiceApiService.GetByUserIdAsync(UserId);
        EmployeeId = employee.Id;
        await LoadReservations();
    }

    private string GetIdFromToken(string token)
    {
        var jwt = new JwtSecurityToken(token);
        return jwt.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
    }

    private async Task LoadReservations()
    {
        reservations = await ServiceApiService.GetReservations(EmployeeId);
    }

    private async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if(args.View.Text != "Year")
        {

        }
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<ReservationDto> args)
    {
        mudparameters.Add(nameof(ReservationDto.ServiceName), args.Data.ServiceName);
        mudparameters.Add(nameof(ReservationDto.StartDate), args.Data.StartDate);
        mudparameters.Add(nameof(ReservationDto.FinishDate), args.Data.FinishDate);

        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AppointmentPage>("AppointmentDetails", mudparameters, options);

    }
}
