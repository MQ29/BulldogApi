@page "/openinghours/{EmployeeId:guid}"
@using Bulldog.Core.Domain
@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services

@inject IServiceApiService ServiceApiService

<h3>Godziny otwarcia</h3>

@if (availableDates != null && availableDates.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Dzień</th>
                <th scope="col">Godziny otwarcia</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var availableDate in availableDates)
            {
                <tr>
                    <td>@availableDate.DayOfWeek</td>
                    <td>
                        <div>
                            <input type="checkbox" @bind="availableDate.IsOpen" />
                            @if (availableDate.IsOpen)
                            {
                                <div>
                                    <label>Rozpoczęcie:</label>
                                    <select @bind="availableDate.WorkingHours.StartTime">
                                        @foreach (var time in TimeHelper.GetHoursList())
                                        {
                                            var timeSpanValue = TimeSpan.Parse(time);
                                            <option value="@timeSpanValue" selected="@IsHourSelected(timeSpanValue, availableDate.WorkingHours.StartTime)">@time</option>
                                        }
                                    </select>

                                    <label>Zakończenie:</label>
                                    <select @bind="availableDate.WorkingHours.EndTime">
                                        @foreach (var time in TimeHelper.GetHoursList())
                                        {
                                            var timeSpanValue = TimeSpan.Parse(time);
                                            <option value="@timeSpanValue" selected="@IsHourSelected(timeSpanValue, availableDate.WorkingHours.EndTime)">@time</option>
                                        }
                                    </select>

                                </div>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="SaveAvailability">Zapisz dostępność</button>
}
else
{
    <p>Brak dostępnych dat.</p>
}

@code {
    [Parameter]
    public Guid EmployeeId { get; set; }
    IList<AvailableDateDto> availableDates = new List<AvailableDateDto>();
    private string selectedStartTime { get; set; } = "11:00";
    private string selectedEndTime { get; set; } = "19:00";
    private bool Mode = true;
    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableDates();
    }

    private async Task LoadAvailableDates()
    {
        availableDates = await ServiceApiService.GetAvailableDates(EmployeeId);

        if (availableDates == null || !availableDates.Any())
        {
            Mode = false;
            availableDates = new List<AvailableDateDto>();
            foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
            {
                availableDates.Add(new AvailableDateDto
                    {
                        Id = Guid.NewGuid(),
                        DayOfWeek = dayOfWeek,
                        EmployeeId = EmployeeId,
                        IsOpen = true,
                        WorkingHours = new WorkingHours(TimeSpan.Parse(selectedStartTime), TimeSpan.Parse(selectedEndTime)),
                        Breaks = new List<Break>(),
                    });
            }
        }
    }

    private static class TimeHelper
    {
        public static List<string> GetHoursList()
        {
            var hoursList = new List<string>();

            for (int hours = 0; hours < 24; hours++)
            {
                for (int minutes = 0; minutes < 60; minutes += 15)
                {
                    var time = new TimeSpan(hours, minutes, 0);
                    var timeString = time.ToString("hh\\:mm");
                    hoursList.Add(timeString);
                }
            }

            return hoursList;
        }
    }

    private bool IsHourSelected(TimeSpan optionValue, TimeSpan selectedTime)
    {
        return optionValue == selectedTime;
    }


    private async Task SaveAvailability()
    {
        try
        {
            if (Mode == false)
            {
                Console.WriteLine("Nie Istnieją");
                await ServiceApiService.AddAvailabilityDates(EmployeeId, availableDates);
            }
            else
            {
                Console.WriteLine("Istnieją");
                await ServiceApiService.UpdateAvailabilityDates(EmployeeId, availableDates);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in opening hours: {ex.Message}");
        }
    }
}
