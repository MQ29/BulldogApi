@layout EmptyLayout
@page "/openinghours"
@using Bulldog.Core.Domain
@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@inject IServiceApiService ServiceApiService
@inject IAuthenticationService AuthenticationService
<div class="ma-6 d-flex justify-content-center">
    @if (availableDates != null && availableDates.Any())
    {
        <MudTable Items="@availableDates" T="AvailableDateDto">
            <HeaderContent>
                <MudTh>Dzień</MudTh>
                <MudTh></MudTh>
                <MudTh>Godziny otwarcia</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.DayOfWeek</MudTd>
                <MudTd>
                        <MudSwitch @bind-Value="@context.IsOpen" Color="Color.Primary" />
                </MudTd>
                    <MudTd>

                        @if (@context.IsOpen)
                    {
                        <div>
                            <MudText>Rozpoczęcie:</MudText>
                            <MudSelect T="TimeSpan" @bind-Value="@context.WorkingHours.StartTime">
                                @foreach (var time in TimeHelper.GetHoursList())
                                {
                                    var timeSpanValue = TimeSpan.Parse(time);
                                    <MudSelectItem Value="@timeSpanValue" Selected="@IsHourSelected(timeSpanValue, @context.WorkingHours.StartTime)">@time</MudSelectItem>
                                }
                            </MudSelect>

                            <MudText>Zakończenie:</MudText>
                            <MudSelect T="TimeSpan" @bind-Value="@context.WorkingHours.EndTime">
                                @foreach (var time in TimeHelper.GetHoursList())
                                {
                                    var timeSpanValue = TimeSpan.Parse(time);
                                    <MudSelectItem Value="@timeSpanValue" Selected="@IsHourSelected(timeSpanValue, @context.WorkingHours.EndTime)">@time</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText>Brak dostępnych dat.</MudText>
    }
</div>




@code {

    IList<AvailableDateDto> availableDates = new List<AvailableDateDto>();
    private string selectedStartTime { get; set; } = "11:00";
    private string selectedEndTime { get; set; } = "19:00";
    private bool Mode = true;
    private Guid EmployeeId;
    private string UserId;

    protected override async Task OnInitializedAsync()
    {
        var jwtToken = await AuthenticationService.GetJwtAsync();
        if (!string.IsNullOrEmpty(jwtToken))
        {
            UserId = GetIdFromToken(jwtToken);
        }


        var employee = await ServiceApiService.GetByUserIdAsync(UserId);
        EmployeeId = employee.Id;
        await LoadAvailableDates(employee.Id);

    }
    private string GetIdFromToken(string token)
    {
        var jwt = new JwtSecurityToken(token);
        return jwt.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
    }

    private async Task LoadAvailableDates(Guid Id)
    {
        availableDates = await ServiceApiService.GetAvailableDates(Id);

        if (availableDates == null || !availableDates.Any())
        {
            Mode = false;
            availableDates = new List<AvailableDateDto>();
            foreach (DayOfWeek dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
            {
                availableDates.Add(new AvailableDateDto
                    {
                        Id = Guid.NewGuid(),
                        DayOfWeek = dayOfWeek,
                        EmployeeId = Id,
                        IsOpen = true,
                        WorkingHours = new WorkingHours(TimeSpan.Parse(selectedStartTime), TimeSpan.Parse(selectedEndTime)),
                        Breaks = new List<Break>(),
                    });
            }
        }
    }

    private static class TimeHelper
    {
        public static List<string> GetHoursList()
        {
            var hoursList = new List<string>();

            for (int hours = 0; hours < 24; hours++)
            {
                for (int minutes = 0; minutes < 60; minutes += 15)
                {
                    var time = new TimeSpan(hours, minutes, 0);
                    var timeString = time.ToString("hh\\:mm");
                    hoursList.Add(timeString);
                }
            }

            return hoursList;
        }
    }

    private bool IsHourSelected(TimeSpan optionValue, TimeSpan selectedTime)
    {
        return optionValue == selectedTime;
    }


    private async Task SaveAvailability()
    {
        try
        {
            if (Mode == false)
            {
                await ServiceApiService.AddAvailabilityDates(EmployeeId, availableDates);
            }
            else
            {
                await ServiceApiService.UpdateAvailabilityDates(EmployeeId, availableDates);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in opening hours: {ex.Message}");
        }
    }
}
