@using Bulldog.Infrastructure.Services.DTO
@using BulldogApiFrontend.Services
@using BulldogApiFrontend.Services.IServices
@using Microsoft.AspNetCore.Authorization
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@page "/services"
@attribute [Authorize]
@inject IServiceService ServiceService
@inject IAuthenticationService AuthenticationService
@inject IModalService modal
@inject IServiceApiService ServiceApiService
@if (services != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Usługa</th>
                <th>Cena</th>
                <th>Czas trwania</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var service in services)
            {
                <tr>
                    <td>@service.Name</td>
                    <td>@service.Price zł</td>
                    <td>@service.Duration min</td>
                    <td>
                        <button @onclick="@(() => {AddServiceIdParameter(service.Id); OpenModal();})" class="btn btn-primary">Book</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading services...</p>
}



@code {
    private IList<ServiceDto> services = new List<ServiceDto>();
    private Guid selectedServiceId;
    private string UserId;
    private ModalParameters parameters = new ModalParameters();
    protected override async Task OnInitializedAsync()
    {
        var jwtToken = await AuthenticationService.GetJwtAsync();
        if (!string.IsNullOrEmpty(jwtToken))
        {
            UserId = GetIdFromToken(jwtToken);
            CompanyDto Company = await ServiceApiService.GetCompanyByUserId(UserId);
            services = await ServiceService.GetServicesByCompanyId(Company.Id);
        }
    }

    private string GetIdFromToken(string token)
    {
        var jwt = new JwtSecurityToken(token);
        return jwt.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
    }

    private void AddServiceIdParameter(Guid serviceId)
    {
        parameters.Add(nameof(Form.Id), serviceId);
    }
    private void OpenModal()
    {
        try
        {
            Console.WriteLine("OpenModal() called");
            var options = new ModalOptions()
                {
                    AnimationType = ModalAnimationType.None
                };
            modal.Show<Form>("Wybierz pracownika", parameters, options);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening modal: {ex.Message}");
        }

    }

}
